name: Sync Markdown Files

on:
  push:
    paths:
      - '**/*.md'
    branches:
      - main

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v3
        with:
          repository: 'roofeehim/TIL'
          fetch-depth: 0  # 履歴を全て取得

      - name: Display git diff
        run: |
          # 直前のコミットと比較して変更されたファイルの一覧を取得
          echo "Changed files from the last commit:"
          git diff --name-only HEAD^ HEAD

          # Markdownファイルのみを抽出して表示
          echo "Changed Markdown files:"
          MODIFIED_MD_FILES=$(git diff --name-only HEAD^ HEAD | grep '\.md$' || true)
          if [ -z "$MODIFIED_MD_FILES" ]; then
            echo "No Markdown files were modified."
          else
            echo "$MODIFIED_MD_FILES"
          fi

      - name: Copy and format files to another repository
        uses: actions/github-script@v6
        env:
          TARGET_REPOSITORY: 'roofeehim/roofeehim-blog'
          TARGET_PATH: 'src/pages/memos'
          ACCESS_TOKEN: ${{ secrets.SYNC_FILES_TOKEN }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const modifiedFiles = process.env.MODIFIED_FILES.split(' ');
            for (const file of modifiedFiles) {
              if (file) {
                const filePath = path.join(process.env.GITHUB_WORKSPACE, file);
                const fileContent = fs.readFileSync(filePath, 'utf8');
                const lines = fileContent.split('\n');
                const firstLine = lines.find(line => line.trim() !== '');
                const title = path.basename(file, '.md');
                const pubDate = new Date().toLocaleDateString('en-US', { month: 'long', day: 'numeric' });
                const tags = path.dirname(file).split('/').filter(Boolean);

                const frontMatter = `---
                  layout: ../../layouts/MarkdownPostLayout.astro
                  title: '${title}'
                  description: '${firstLine}'
                  pubDate: '${pubDate}'
                  tags: ['${tags.join("', '")}']
                  ---
                  `;
                const newContent = frontMatter + '\n' + fileContent;

                const targetFilePath = `${process.env.TARGET_PATH}/${title}.md`;
                const octokit = getOctokit(process.env.ACCESS_TOKEN);

                await octokit.rest.repos.createOrUpdateFileContents({
                  owner: context.repo.owner,
                  repo: process.env.TARGET_REPOSITORY,
                  path: targetFilePath,
                  message: `Sync Markdown file: ${title}`,
                  content: Buffer.from(newContent).toString('base64'),
                  branch: 'main',
                  committer: {
                    name: process.env.GITHUB_ACTOR,
                    email: 'email@example.com'
                  },
                  author: {
                    name: process.env.GITHUB_ACTOR,
                    email: 'email@example.com'
                  }
                });
              }
            }

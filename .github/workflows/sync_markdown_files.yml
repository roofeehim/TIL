name: Sync Markdown Files

on:
  push:
    paths:
      - '**/*.md'
    branches:
      - main

      jobs:
        sync:
          runs-on: ubuntu-latest
          steps:
            - name: Checkout source repository
              uses: actions/checkout@v3
              with:
                repository: 'roofeehim/TIL'
                fetch-depth: 0  # 過去のコミットも含めて全ての履歴を取得
      
            - name: Find Modified Markdown Files
              run: |
                git fetch --depth=1
                MODIFIED_FILES=$(git diff --name-only HEAD^ HEAD | grep '\.md$')
                echo "Modified Markdown files: $MODIFIED_FILES"
                echo "MODIFIED_FILES=$MODIFIED_FILES" >> $GITHUB_ENV
      
            - name: Copy and format files to another repository
              uses: actions/github-script@v6
              env:
                TARGET_REPOSITORY: 'roofeehim/roofeehim-blog'
                TARGET_PATH: 'src/pages/memos'
                ACCESS_TOKEN: ${{ secrets.SYNC_FILES_TOKEN }}
              with:
                script: |
                  const fs = require('fs');
                  const path = require('path');
                  const { context, getOctokit } = require('@actions/github');
      
                  const modifiedFiles = process.env.MODIFIED_FILES.split(' ');
                  for (const file of modifiedFiles) {
                    const filePath = path.join(process.env.GITHUB_WORKSPACE, file);
                    const fileContent = fs.readFileSync(filePath, 'utf8');
                    const lines = fileContent.split('\n');
                    const firstLine = lines.find(line => line.trim() !== '');
                    const title = path.basename(file, '.md');
                    const pubDate = new Date().toLocaleDateString('en-US', { month: 'long', day: 'numeric' });
                    const tags = path.dirname(file).split('/').filter(Boolean);
      
                    const frontMatter = `---
                      layout: ../../layouts/MarkdownPostLayout.astro
                      title: '${title}'
                      description: '${firstLine}'
                      pubDate: '${pubDate}'
                      tags: ['${tags.join("', '")}']
                      ---
                      `;
                    const newContent = frontMatter + '\n' + fileContent;
      
                    const targetFilePath = `${process.env.TARGET_PATH}/${title}.md`;
                    const octokit = getOctokit(process.env.ACCESS_TOKEN);
      
                    await octokit.rest.repos.createOrUpdateFileContents({
                      owner: context.repo.owner,
                      repo: process.env.TARGET_REPOSITORY,
                      path: targetFilePath,
                      message: `Sync Markdown file: ${title}`,
                      content: Buffer.from(newContent).toString('base64'),
                      branch: 'main',
                      committer: {
                        name: process.env.GITHUB_ACTOR,
                        email: 'email@example.com'
                      },
                      author: {
                        name: process.env.GITHUB_ACTOR,
                        email: 'email@example.com'
                      }
                    });
                  }
      